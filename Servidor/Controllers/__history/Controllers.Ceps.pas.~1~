unit Controllers.Ceps;

interface

uses Horse, System.SysUtils, System.JSON;

procedure RegistrarRotas;
procedure Listar(Req: THorseRequest; Res: THorseResponse; Next: TProc);
procedure ListarId(Req: THorseRequest; Res: THorseResponse; Next: TProc);
procedure Inserir(Req: THorseRequest; Res: THorseResponse; Next: TProc);
procedure Editar(Req: THorseRequest; Res: THorseResponse; Next: TProc);
procedure Excluir(Req: THorseRequest; Res: THorseResponse; Next: TProc);


implementation

uses Dm.Global;

procedure RegistrarRotas;
begin
  //Rotas
  THorse.Get('/clientes', Listar);
  THorse.Get('/clientes/:id_cliente', ListarId);
  THorse.Post('/clientes', Inserir);
  THorse.Put('/clientes/:id_cliente', Editar);
  THorse.Delete('/clientes/:id_cliente', Excluir);
end;


procedure ListarId(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
 Dm: TDm;
 id_cliente: Integer;
begin
  Try
    Try
      Dm := TDm.Create(nil);

        try
          id_cliente := Req.Params['id_cliente'].ToInteger;
        except
          id_cliente := 0;

        end;

      Res.Send<TJsonObject>(Dm.ClientesListarId(id_cliente));

    Except on ex:exception do
      Res.Send('Ocorreu um erro: ' + ex.Message).Status(500);

    End;
  Finally
  FreeAndNil(Dm);
  End;
end;

procedure Listar(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
 Dm: TDm;
 filtro: String;
begin
  Try
    Dm := TDm.Create(nil);

    filtro := Req.Query['filtro'];

    Res.Send<TJsonArray>(Dm.ClientesListar(filtro));

  Finally
    FreeAndNil(Dm);
  end;
end;

procedure Inserir(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
 Dm: TDm;
 body: TJsonObject;
 nome, endereco, complemento, bairro, cidade, uf: string;
begin
  Try
    Try
      Dm := TDm.Create(nil);
      body := Req.Body<TJsonObject>;

      nome := body.GetValue<string>('nome', '');
      endereco := body.GetValue<string>('endereco', '');
      complemento := body.GetValue<string>('complemento', '');
      bairro := body.GetValue<string>('bairro', '');
      cidade := body.GetValue<string>('cidade', '');
      uf := body.GetValue<string>('uf', '');


      Res.Send<TJsonObject>(Dm.ClientesInserir(nome, endereco, complemento,
                            bairro, cidade, uf)).Status(201);

    Except on ex:exception do
      Res.Send('Ocorreu um erro: ' + ex.Message).Status(500);

    End;
  Finally
  FreeAndNil(Dm);
  End;

end;

procedure Editar(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
 Dm: TDm;
 body: TJsonObject;
 id_cliente: integer;
 nome, endereco, complemento, bairro, cidade, uf: string;
begin
  Try
    Try
      Dm := TDm.Create(nil);

         try
          id_cliente := Req.Params['id_cliente'].ToInteger;
        except
          id_cliente := 0;

        end;

      body := Req.Body<TJsonObject>;

      nome := body.GetValue<string>('nome', '');
      endereco := body.GetValue<string>('endereco', '');
      complemento := body.GetValue<string>('complemento', '');
      bairro := body.GetValue<string>('bairro', '');
      cidade := body.GetValue<string>('cidade', '');
      uf := body.GetValue<string>('uf', '');


      Res.Send<TJsonObject>(Dm.ClientesEditar(id_cliente, nome, endereco, complemento,
                            bairro, cidade, uf));

    Except on ex:exception do
      Res.Send('Ocorreu um erro: ' + ex.Message).Status(500);

    End;
  Finally
  FreeAndNil(Dm);
  End;


end;

procedure Excluir(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
 Dm: TDm;
 body: TJsonObject;
 id_cliente: integer;
 nome, endereco, complemento, bairro, cidade, uf: string;
begin
  Try
    Try
      Dm := TDm.Create(nil);

         try
          id_cliente := Req.Params['id_cliente'].ToInteger;
        except
          id_cliente := 0;

        end;

      body := Req.Body<TJsonObject>;



      Res.Send<TJsonObject>(Dm.ClientesExcluir(id_cliente));

    Except on ex:exception do
      Res.Send('Ocorreu um erro: ' + ex.Message).Status(500);

    End;
  Finally
  FreeAndNil(Dm);
  End;



end;

end.
